// Code generated by protoc-gen-rest-metadata. DO NOT EDIT.
// source: routerrpc/router.proto

/*
Package routerrpc contains REST metadata.
*/
package routerrpc

import (
	"github.com/grpc-ecosystem/grpc-gateway/runtime"
)

// RegisterRouterHandlerMetadata registers the http
// handler metadata for service Router.
func RegisterRouterHandlerMetadata(targetMap map[string]struct {
	ClientStreaming bool
	ServerStreaming bool
	Method          string
	Pattern         runtime.Pattern
}) {

	targetMap["/routerrpc.Router/SendPaymentV2"] = struct {
		ClientStreaming bool
		ServerStreaming bool
		Method          string
		Pattern         runtime.Pattern
	}{
		ClientStreaming: false,
		ServerStreaming: true,
		Method:          "POST",
		Pattern:         runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2}, []string{"v2", "router", "send"}, "", runtime.AssumeColonVerbOpt(true))),
	}

	targetMap["/routerrpc.Router/TrackPaymentV2"] = struct {
		ClientStreaming bool
		ServerStreaming bool
		Method          string
		Pattern         runtime.Pattern
	}{
		ClientStreaming: false,
		ServerStreaming: true,
		Method:          "GET",
		Pattern:         runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2, 1, 0, 4, 1, 5, 3}, []string{"v2", "router", "track", "payment_hash"}, "", runtime.AssumeColonVerbOpt(true))),
	}

	targetMap["/routerrpc.Router/EstimateRouteFee"] = struct {
		ClientStreaming bool
		ServerStreaming bool
		Method          string
		Pattern         runtime.Pattern
	}{
		ClientStreaming: false,
		ServerStreaming: false,
		Method:          "POST",
		Pattern:         runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2, 2, 3}, []string{"v2", "router", "route", "estimatefee"}, "", runtime.AssumeColonVerbOpt(true))),
	}

	targetMap["/routerrpc.Router/SendToRouteV2"] = struct {
		ClientStreaming bool
		ServerStreaming bool
		Method          string
		Pattern         runtime.Pattern
	}{
		ClientStreaming: false,
		ServerStreaming: false,
		Method:          "POST",
		Pattern:         runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2, 2, 3}, []string{"v2", "router", "route", "send"}, "", runtime.AssumeColonVerbOpt(true))),
	}

	targetMap["/routerrpc.Router/ResetMissionControl"] = struct {
		ClientStreaming bool
		ServerStreaming bool
		Method          string
		Pattern         runtime.Pattern
	}{
		ClientStreaming: false,
		ServerStreaming: false,
		Method:          "POST",
		Pattern:         runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2, 2, 3}, []string{"v2", "router", "mc", "reset"}, "", runtime.AssumeColonVerbOpt(true))),
	}

	targetMap["/routerrpc.Router/QueryMissionControl"] = struct {
		ClientStreaming bool
		ServerStreaming bool
		Method          string
		Pattern         runtime.Pattern
	}{
		ClientStreaming: false,
		ServerStreaming: false,
		Method:          "GET",
		Pattern:         runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2}, []string{"v2", "router", "mc"}, "", runtime.AssumeColonVerbOpt(true))),
	}

	targetMap["/routerrpc.Router/XImportMissionControl"] = struct {
		ClientStreaming bool
		ServerStreaming bool
		Method          string
		Pattern         runtime.Pattern
	}{
		ClientStreaming: false,
		ServerStreaming: false,
		Method:          "POST",
		Pattern:         runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2, 2, 3}, []string{"v2", "router", "x", "importhistory"}, "", runtime.AssumeColonVerbOpt(true))),
	}

	targetMap["/routerrpc.Router/GetMissionControlConfig"] = struct {
		ClientStreaming bool
		ServerStreaming bool
		Method          string
		Pattern         runtime.Pattern
	}{
		ClientStreaming: false,
		ServerStreaming: false,
		Method:          "GET",
		Pattern:         runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2}, []string{"v2", "router", "mccfg"}, "", runtime.AssumeColonVerbOpt(true))),
	}

	targetMap["/routerrpc.Router/QueryProbability"] = struct {
		ClientStreaming bool
		ServerStreaming bool
		Method          string
		Pattern         runtime.Pattern
	}{
		ClientStreaming: false,
		ServerStreaming: false,
		Method:          "GET",
		Pattern:         runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2, 2, 3, 1, 0, 4, 1, 5, 4, 1, 0, 4, 1, 5, 5, 1, 0, 4, 1, 5, 6}, []string{"v2", "router", "mc", "probability", "from_node", "to_node", "amt_msat"}, "", runtime.AssumeColonVerbOpt(true))),
	}

	targetMap["/routerrpc.Router/BuildRoute"] = struct {
		ClientStreaming bool
		ServerStreaming bool
		Method          string
		Pattern         runtime.Pattern
	}{
		ClientStreaming: false,
		ServerStreaming: false,
		Method:          "POST",
		Pattern:         runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2}, []string{"v2", "router", "route"}, "", runtime.AssumeColonVerbOpt(true))),
	}

	targetMap["/routerrpc.Router/SubscribeHtlcEvents"] = struct {
		ClientStreaming bool
		ServerStreaming bool
		Method          string
		Pattern         runtime.Pattern
	}{
		ClientStreaming: false,
		ServerStreaming: true,
		Method:          "GET",
		Pattern:         runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2}, []string{"v2", "router", "htlcevents"}, "", runtime.AssumeColonVerbOpt(true))),
	}

}
