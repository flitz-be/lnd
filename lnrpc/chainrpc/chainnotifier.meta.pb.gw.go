// Code generated by protoc-gen-rest-metadata. DO NOT EDIT.
// source: chainrpc/chainnotifier.proto

/*
Package chainrpc contains REST metadata.
*/
package chainrpc

import (
	"github.com/grpc-ecosystem/grpc-gateway/runtime"
)

// RegisterChainNotifierHandlerMetadata registers the http
// handler metadata for service ChainNotifier.
func RegisterChainNotifierHandlerMetadata(targetMap map[string]struct {
	ClientStreaming bool
	ServerStreaming bool
	Method          string
	Pattern         runtime.Pattern
}) {

	targetMap["/chainrpc.ChainNotifier/RegisterConfirmationsNtfn"] = struct {
		ClientStreaming bool
		ServerStreaming bool
		Method          string
		Pattern         runtime.Pattern
	}{
		ClientStreaming: false,
		ServerStreaming: true,
		Method:          "POST",
		Pattern:         runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2, 2, 3}, []string{"v2", "chainnotifier", "register", "confirmations"}, "", runtime.AssumeColonVerbOpt(true))),
	}

	targetMap["/chainrpc.ChainNotifier/RegisterSpendNtfn"] = struct {
		ClientStreaming bool
		ServerStreaming bool
		Method          string
		Pattern         runtime.Pattern
	}{
		ClientStreaming: false,
		ServerStreaming: true,
		Method:          "POST",
		Pattern:         runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2, 2, 3}, []string{"v2", "chainnotifier", "register", "spends"}, "", runtime.AssumeColonVerbOpt(true))),
	}

	targetMap["/chainrpc.ChainNotifier/RegisterBlockEpochNtfn"] = struct {
		ClientStreaming bool
		ServerStreaming bool
		Method          string
		Pattern         runtime.Pattern
	}{
		ClientStreaming: false,
		ServerStreaming: true,
		Method:          "POST",
		Pattern:         runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2, 2, 3}, []string{"v2", "chainnotifier", "register", "blocks"}, "", runtime.AssumeColonVerbOpt(true))),
	}

}
