// Code generated by protoc-gen-rest-metadata. DO NOT EDIT.
// source: wtclientrpc/wtclient.proto

/*
Package wtclientrpc contains REST metadata.
*/
package wtclientrpc

import (
	"github.com/grpc-ecosystem/grpc-gateway/runtime"
)

// RegisterWatchtowerClientHandlerMetadata registers the http
// handler metadata for service WatchtowerClient.
func RegisterWatchtowerClientHandlerMetadata(targetMap map[string]struct {
	ClientStreaming bool
	ServerStreaming bool
	Method          string
	Pattern         runtime.Pattern
}) {

	targetMap["/wtclientrpc.WatchtowerClient/AddTower"] = struct {
		ClientStreaming bool
		ServerStreaming bool
		Method          string
		Pattern         runtime.Pattern
	}{
		ClientStreaming: false,
		ServerStreaming: false,
		Method:          "POST",
		Pattern:         runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2}, []string{"v2", "watchtower", "client"}, "", runtime.AssumeColonVerbOpt(true))),
	}

	targetMap["/wtclientrpc.WatchtowerClient/RemoveTower"] = struct {
		ClientStreaming bool
		ServerStreaming bool
		Method          string
		Pattern         runtime.Pattern
	}{
		ClientStreaming: false,
		ServerStreaming: false,
		Method:          "DELETE",
		Pattern:         runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2, 1, 0, 4, 1, 5, 3}, []string{"v2", "watchtower", "client", "pubkey"}, "", runtime.AssumeColonVerbOpt(true))),
	}

	targetMap["/wtclientrpc.WatchtowerClient/ListTowers"] = struct {
		ClientStreaming bool
		ServerStreaming bool
		Method          string
		Pattern         runtime.Pattern
	}{
		ClientStreaming: false,
		ServerStreaming: false,
		Method:          "GET",
		Pattern:         runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2}, []string{"v2", "watchtower", "client"}, "", runtime.AssumeColonVerbOpt(true))),
	}

	targetMap["/wtclientrpc.WatchtowerClient/GetTowerInfo"] = struct {
		ClientStreaming bool
		ServerStreaming bool
		Method          string
		Pattern         runtime.Pattern
	}{
		ClientStreaming: false,
		ServerStreaming: false,
		Method:          "GET",
		Pattern:         runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2, 2, 3, 1, 0, 4, 1, 5, 4}, []string{"v2", "watchtower", "client", "info", "pubkey"}, "", runtime.AssumeColonVerbOpt(true))),
	}

	targetMap["/wtclientrpc.WatchtowerClient/Stats"] = struct {
		ClientStreaming bool
		ServerStreaming bool
		Method          string
		Pattern         runtime.Pattern
	}{
		ClientStreaming: false,
		ServerStreaming: false,
		Method:          "GET",
		Pattern:         runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2, 2, 3}, []string{"v2", "watchtower", "client", "stats"}, "", runtime.AssumeColonVerbOpt(true))),
	}

	targetMap["/wtclientrpc.WatchtowerClient/Policy"] = struct {
		ClientStreaming bool
		ServerStreaming bool
		Method          string
		Pattern         runtime.Pattern
	}{
		ClientStreaming: false,
		ServerStreaming: false,
		Method:          "GET",
		Pattern:         runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2, 2, 3}, []string{"v2", "watchtower", "client", "policy"}, "", runtime.AssumeColonVerbOpt(true))),
	}

}
